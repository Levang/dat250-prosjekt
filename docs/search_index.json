[
["index.html", "DAT250 - Information security - Project report Preface", " DAT250 - Information security - Project report Joachim Andreassen Lars Sverre Levang Ardijan Rexhaj Vidar Andre Bø Elias Nodland 2020-10-17 Preface This is a report/documentation for the website safecoin.tech, a banking site designed to be… well… safe! "],
["structure.html", "1 Structure", " 1 Structure "],
["databases.html", "2 Databases 2.1 Users 2.2 Accounts 2.3 Transactions", " 2 Databases Our databases are designed with the assumption that a malicious actor gets a hold of all of them and knows our source code. In a perfect world they would not be able to use any of this to extract any valuable information. The weakpoint is the fact that if an account number is known and an attacker has a hold of the Accounts database, it is very simple to look up the account balance. After five minutes of thinking, this problem seems unsolvable. Some notation: (a) means the hash of a is stored. ((a)) means an encrypted form of a is stored. 2.1 Users Users is a database of registered users, their 2fa_secret key, and their accounts and the keys to control those accounts. None of the sensitive information in this database should ever be stored in a plaintext state. It should optimally be cryptographically hashed, but for data that is not user supplied, at least encrypted using the information supplied by the user. Doing it that way means we get to encrypt user data and not store the key anywhere. (email) (pw+salt) salt n ((2fa_secret)) ((accs+priv_keys)) email is the users identifier. It is stored in a cryptographically hashed state to allow for the plaintext email to be used as part of an encryption key. This also increases security because the only way to find out which emails are registered is to brute force all emails which should hopefully take a long time because the hash is cryptographic. This comes at the cost of not knowing what emails are registered so any email notifications are impossible except for something like “There were multiple failed attempts at signing into your account” since the attacker actually provides the email in this case. pw is the users password. It is stored as a cryptographical hash of itself prepended to a salt. This prevents rainbow table attacks on the database. salt is the only thing stored in plaintext and is a cryptographically random number. n is the number of failed login attempts since the previous successful login. 2fa_secret is the secret key used to generate One Time Passcodes (OTP’s). It is encrypted using the users email and password. n_accs is simply the number of accounts the user has. It is encrypted using the users email and password. accs+priv_keys is simply a long list containing all account numbers associated with the user and the private key associated with that account. It is encrypted using the users email and password. 2.2 Accounts Accounts is a database containing all banking accounts registered and their balance. Accounts should be borderline “use and dispose” meaning they should be easy to create and not limited in supply. (acc) public_key balance acc is the account number. It is stored as a cryptograhpical hash. This allows us to prevent a class of attacks where an account of interesting balance can be associated with some account number in any other way than testing every account number until a match is made. It is of course simple to check the balance of any known account number. public_key is the public key associated with the account. It is used to verify transactions from the account. balance is simply the balance of the account. 2.3 Transactions Transactions is a database containing all transactions that have been performed ever. It should contain no sensitive information. uid date timeout (from) (to) amount sign uid is a unique transaction id associated with the account. This is included to make sure a signed transaction can only be counted once. date is the timestamp of when the transaction was made. Probably UNIX time. timeout is a timestamp of when the transaction should expire. This prevents transactions that fail being reused by a bad actor some time in the future. from is the account number that is transferring. It is stored as a cryptographic hash to prevent the backtracking discussed earlier. to is the account number that is receiving. It is stored as a cryptographic hash to prevent the backtracking discussed earlier. amount is the amount that is transferring. Note that this can not be more than the balance of the from account. sign is the signature of the transaction, signed with the private_key of the from account. If the transaction is changed in any way then this signature must also change, preventing transactions being reused. "],
["users.html", "3 Users", " 3 Users "],
["registration.html", "4 Registration", " 4 Registration "],
["authentication.html", "5 Authentication", " 5 Authentication "],
["accounts.html", "6 Accounts", " 6 Accounts "],
["transactions.html", "7 Transactions", " 7 Transactions "]
]
